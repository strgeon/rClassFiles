0
00:00:00,000 --> 00:00:00,499


1
00:00:00,499 --> 00:00:03,640
In this video, we'll create a basic line plot

2
00:00:03,640 --> 00:00:06,280
to visualize crime trends.

3
00:00:06,280 --> 00:00:08,480
Let's start by reading in our data.

4
00:00:08,480 --> 00:00:12,260
We'll call it mvt for motor vehicle thefts,

5
00:00:12,260 --> 00:00:18,520
and use the read.csv function to read in the file mvt.csv.

6
00:00:18,520 --> 00:00:23,580
We'll add the argument stringsAsFactors = FALSE,

7
00:00:23,580 --> 00:00:25,220
since we have a text field, and we

8
00:00:25,220 --> 00:00:28,760
want to make sure it's read in properly.

9
00:00:28,760 --> 00:00:31,300
Let's take a look at the structure of our data

10
00:00:31,300 --> 00:00:34,200
using the str function.

11
00:00:34,200 --> 00:00:38,390
We have over 190,000 observations

12
00:00:38,390 --> 00:00:41,950
of three different variables-- the date of the crime,

13
00:00:41,950 --> 00:00:43,990
and the location of the crime, in terms

14
00:00:43,990 --> 00:00:46,740
of latitude and longitude.

15
00:00:46,740 --> 00:00:50,090
We want to first convert the Date variable to a format

16
00:00:50,090 --> 00:00:54,210
that R will recognize so that we can extract the day of the week

17
00:00:54,210 --> 00:00:56,160
and the hour of the day.

18
00:00:56,160 --> 00:01:00,970
We can do this using the strptime function.

19
00:01:00,970 --> 00:01:04,519
So we want to replace our variable, Date,

20
00:01:04,519 --> 00:01:08,950
with the output of the strptime function, which

21
00:01:08,950 --> 00:01:13,320
takes as a first argument our variable, Date, and then

22
00:01:13,320 --> 00:01:16,910
as a second argument the format that the date is in.

23
00:01:16,910 --> 00:01:20,730
Here, we can see in the output from the str function

24
00:01:20,730 --> 00:01:27,550
that our format is the month slash the day slash the year,

25
00:01:27,550 --> 00:01:31,090
and then the hour colon minutes.

26
00:01:31,090 --> 00:01:58,770
So our format equals, "%m/%d/%y %H:%M", close the parentheses,

27
00:01:58,770 --> 00:02:01,000
and hit Enter.

28
00:02:01,000 --> 00:02:04,500
In this format, we can extract the hour and the day

29
00:02:04,500 --> 00:02:06,560
of the week from the Date variable,

30
00:02:06,560 --> 00:02:10,280
and we can add these as new variables to our data frame.

31
00:02:10,280 --> 00:02:14,695
We can do this by first defining our new variable,

32
00:02:14,695 --> 00:02:16,070
mvt$Weekday = weekdays(mvt$Date).

33
00:02:16,070 --> 00:02:25,150


34
00:02:25,150 --> 00:02:29,180
Then, to add the hour, which we'll call mvt$Hour,

35
00:02:29,180 --> 00:02:35,080
we just take the hour variable out of Date variable.

36
00:02:35,080 --> 00:02:39,970
This only exists because we converted the Date variable.

37
00:02:39,970 --> 00:02:41,990
Let's take a look at the structure of our data

38
00:02:41,990 --> 00:02:44,610
again to see what it looks like.

39
00:02:44,610 --> 00:02:47,520
Now, we have two more variables-- Weekday,

40
00:02:47,520 --> 00:02:50,100
which gives the day of the week, and Hour,

41
00:02:50,100 --> 00:02:52,770
which gives the hour of the day.

42
00:02:52,770 --> 00:02:55,410
Now, we're ready to make some line plots.

43
00:02:55,410 --> 00:02:57,400
Let's start by creating the line plot

44
00:02:57,400 --> 00:03:01,470
we saw in the previous video with just one line and a value

45
00:03:01,470 --> 00:03:04,190
for every day of the week.

46
00:03:04,190 --> 00:03:07,030
We want to plot as that value the total number

47
00:03:07,030 --> 00:03:09,930
of crimes on each day of the week.

48
00:03:09,930 --> 00:03:12,330
We can get this information by creating

49
00:03:12,330 --> 00:03:15,470
a table of the Weekday variable.

50
00:03:15,470 --> 00:03:18,820


51
00:03:18,820 --> 00:03:23,510
This gives the total amount of crime on each day of the week.

52
00:03:23,510 --> 00:03:26,130
Let's save this table as a data frame

53
00:03:26,130 --> 00:03:29,360
so that we can pass it to ggplot as our data.

54
00:03:29,360 --> 00:03:36,980
We'll call it WeekdayCounts, and use the as.data.frame function

55
00:03:36,980 --> 00:03:39,430
to convert our table to a data frame.

56
00:03:39,430 --> 00:03:46,000


57
00:03:46,000 --> 00:03:48,655
Let's see what this looks like with the str function.

58
00:03:48,655 --> 00:03:52,300


59
00:03:52,300 --> 00:03:55,830
We can see that our data frame has seven observations, one

60
00:03:55,830 --> 00:03:59,400
for each day of the week, and two different variables.

61
00:03:59,400 --> 00:04:02,740
The first variable, called Var1, gives

62
00:04:02,740 --> 00:04:06,480
the name of the day of the week, and the second variable,

63
00:04:06,480 --> 00:04:11,010
called Freq, for frequency, gives the total amount of crime

64
00:04:11,010 --> 00:04:13,660
on that day of the week.

65
00:04:13,660 --> 00:04:15,610
Now, we're ready to make our plot.

66
00:04:15,610 --> 00:04:19,319
First, we need to load the ggplot2 package.

67
00:04:19,319 --> 00:04:20,610
So we'll type library(ggplot2).

68
00:04:20,610 --> 00:04:25,120


69
00:04:25,120 --> 00:04:28,630
Now, we'll create our plot using the ggplot function.

70
00:04:28,630 --> 00:04:31,560
So type ggplot, and then we need to give

71
00:04:31,560 --> 00:04:35,740
the name of our data, which is WeekdayCounts.

72
00:04:35,740 --> 00:04:38,500
And then we need to define our aesthetic.

73
00:04:38,500 --> 00:04:43,730
So our aesthetic should have x = Var1,

74
00:04:43,730 --> 00:04:47,200
since we want the day of the week on the x-axis,

75
00:04:47,200 --> 00:04:51,540
and y = Freq, since we want the frequency,

76
00:04:51,540 --> 00:04:54,869
the number of crimes, on the y-axis.

77
00:04:54,869 --> 00:04:56,910
Now, we just need to add geom_line(aes(group=1)).

78
00:04:56,910 --> 00:05:08,670


79
00:05:08,670 --> 00:05:11,680
This just groups all of our data into one line,

80
00:05:11,680 --> 00:05:14,620
since we want one line in our plot.

81
00:05:14,620 --> 00:05:16,900
Go ahead and hit Enter.

82
00:05:16,900 --> 00:05:20,280
We can see that this is very close to the plot we want.

83
00:05:20,280 --> 00:05:23,050
We have the total number of crime plotted

84
00:05:23,050 --> 00:05:25,530
by day of the week, but our days of the week

85
00:05:25,530 --> 00:05:27,240
are a little bit out of order.

86
00:05:27,240 --> 00:05:30,600
We have Friday first, then Monday, then Saturday,

87
00:05:30,600 --> 00:05:32,790
then Sunday, etc.

88
00:05:32,790 --> 00:05:35,420
What ggplot did was it put the days of the week

89
00:05:35,420 --> 00:05:37,510
in alphabetical order.

90
00:05:37,510 --> 00:05:40,780
But we actually want the days of the week in chronological order

91
00:05:40,780 --> 00:05:43,840
to make this plot a bit easier to read.

92
00:05:43,840 --> 00:05:48,560
We can do this by making the Var1 variable an ordered factor

93
00:05:48,560 --> 00:05:49,930
variable.

94
00:05:49,930 --> 00:05:54,030
This signals to ggplot that the ordering is meaningful.

95
00:05:54,030 --> 00:05:57,890
We can do this by using the factor function.

96
00:05:57,890 --> 00:06:04,450
So let's start by typing WeekdayCounts$Var1,

97
00:06:04,450 --> 00:06:07,810
the variable we want to convert, and set that equal

98
00:06:07,810 --> 00:06:10,430
to the output of the factor function,

99
00:06:10,430 --> 00:06:17,590
where the first argument is our variable, WeekdayCounts$Var1,

100
00:06:17,590 --> 00:06:20,950
the second argument is ordered = TRUE.

101
00:06:20,950 --> 00:06:23,770
This says that we want an ordered factor.

102
00:06:23,770 --> 00:06:26,450
And the third argument, which is levels,

103
00:06:26,450 --> 00:06:28,990
should be equal to a vector of the days

104
00:06:28,990 --> 00:06:31,460
of the week in the order we want them to be in.

105
00:06:31,460 --> 00:06:34,140
We'll use the c function to do this.

106
00:06:34,140 --> 00:06:36,500
So first, in quotes, type "Sunday" --

107
00:06:36,500 --> 00:06:44,110
we want Sunday first-- and then "Monday", "Tuesday",

108
00:06:44,110 --> 00:06:54,290
"Wednesday", "Thursday", "Friday", "Saturday".

109
00:06:54,290 --> 00:06:57,400


110
00:06:57,400 --> 00:07:01,480
Go ahead and close both parentheses and hit Enter.

111
00:07:01,480 --> 00:07:04,900
Now, let's try our plot again by just hitting the up arrow twice

112
00:07:04,900 --> 00:07:07,000
and hitting Enter.

113
00:07:07,000 --> 00:07:09,010
Now, this is the plot we want.

114
00:07:09,010 --> 00:07:11,710
We have the total crime by day of the week

115
00:07:11,710 --> 00:07:14,920
with the days of the week in chronological order.

116
00:07:14,920 --> 00:07:16,880
The last thing we'll want to do to our plot

117
00:07:16,880 --> 00:07:19,360
is just change the x- and y-axis labels,

118
00:07:19,360 --> 00:07:22,060
since they're not very helpful as they are now.

119
00:07:22,060 --> 00:07:24,180
To do this, back in the R console,

120
00:07:24,180 --> 00:07:27,409
just hit the up arrow to get back to our plotting line,

121
00:07:27,409 --> 00:07:29,200
and then we'll add xlab("Day of the Week").

122
00:07:29,200 --> 00:07:35,630


123
00:07:35,630 --> 00:07:37,880
And then we'll add ylab("Total Motor Vehicle Thefts").

124
00:07:37,880 --> 00:07:50,170


125
00:07:50,170 --> 00:07:52,040
Now, this is the plot we were trying

126
00:07:52,040 --> 00:07:56,810
to generate with descriptive labels on the x- and y-axis.

127
00:07:56,810 --> 00:07:59,990
In the next video, we'll add the hour of the day

128
00:07:59,990 --> 00:08:04,170
to our line plot, and then create a heat map.

