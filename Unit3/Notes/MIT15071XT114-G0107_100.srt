0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:03,630
Now, we're ready to actually start building models.

2
00:00:03,630 --> 00:00:06,130
So as usual, the first thing we're going to do

3
00:00:06,130 --> 00:00:09,121
is split our data into a training and a testing set.

4
00:00:09,121 --> 00:00:10,620
And for this problem, we're actually

5
00:00:10,620 --> 00:00:14,297
going to train on data from the 2004 and 2008 elections,

6
00:00:14,297 --> 00:00:17,680
and we're going to test on data from the 2012

7
00:00:17,680 --> 00:00:19,290
presidential election.

8
00:00:19,290 --> 00:00:21,640
So to do that, we'll create a data frame

9
00:00:21,640 --> 00:00:25,380
called Train, using the subset function that breaks down

10
00:00:25,380 --> 00:00:28,260
the original polling data frame and only

11
00:00:28,260 --> 00:00:33,080
stores the observations when either the Year was 2004

12
00:00:33,080 --> 00:00:38,240
or when the Year was 2008.

13
00:00:38,240 --> 00:00:39,960
And to obtain the testing set, we're

14
00:00:39,960 --> 00:00:45,070
going to use subset to create a data frame called Test that

15
00:00:45,070 --> 00:00:47,900
saves the observations in polling where

16
00:00:47,900 --> 00:00:51,330
the year was 2012.

17
00:00:51,330 --> 00:00:54,740
So now that we've broken it down into a training and a testing

18
00:00:54,740 --> 00:00:58,290
set, we want to understand the prediction of our baseline

19
00:00:58,290 --> 00:01:00,660
model against which we want to compare

20
00:01:00,660 --> 00:01:02,870
a later logistic regression model.

21
00:01:02,870 --> 00:01:05,040
So to do that, we'll look at the breakdown

22
00:01:05,040 --> 00:01:06,990
of the dependent variable in the training

23
00:01:06,990 --> 00:01:09,105
set using the table function.

24
00:01:09,105 --> 00:01:13,380


25
00:01:13,380 --> 00:01:17,820
What we can see here is that in 47 of the 100 training

26
00:01:17,820 --> 00:01:20,320
observations, the Democrat won the state,

27
00:01:20,320 --> 00:01:23,830
and in 53 of the observations, the Republican won the state.

28
00:01:23,830 --> 00:01:26,570
So our simple baseline model is always

29
00:01:26,570 --> 00:01:29,080
going to predict the more common outcome, which

30
00:01:29,080 --> 00:01:31,690
is that the Republican is going to win the state.

31
00:01:31,690 --> 00:01:33,490
And we see that the simple baseline model

32
00:01:33,490 --> 00:01:38,410
will have accuracy of 53% on the training set.

33
00:01:38,410 --> 00:01:42,070
Now, unfortunately, this is a pretty weak model.

34
00:01:42,070 --> 00:01:45,450
It always predicts Republican, even for a very landslide

35
00:01:45,450 --> 00:01:48,300
Democratic state, where the Democrat was polling

36
00:01:48,300 --> 00:01:51,610
by 15% or 20% ahead of the Republican.

37
00:01:51,610 --> 00:01:55,240
So nobody would really consider this to be a credible model.

38
00:01:55,240 --> 00:01:59,490
So we need to think of a smarter baseline model against which

39
00:01:59,490 --> 00:02:02,580
we can compare our logistic regression models that we're

40
00:02:02,580 --> 00:02:04,070
going to develop later.

41
00:02:04,070 --> 00:02:06,860
So a reasonable smart baseline would

42
00:02:06,860 --> 00:02:09,660
be to just take one of the polls-- in our case,

43
00:02:09,660 --> 00:02:12,100
we'll take Rasmussen-- and make a prediction

44
00:02:12,100 --> 00:02:14,920
based on who poll said was winning in the state.

45
00:02:14,920 --> 00:02:18,090
So for instance, if the Republican is polling ahead,

46
00:02:18,090 --> 00:02:21,010
the Rasmussen smart baseline would just

47
00:02:21,010 --> 00:02:23,040
pick the Republican to be the winner.

48
00:02:23,040 --> 00:02:25,880
If the Democrat was ahead, it would pick the Democrat.

49
00:02:25,880 --> 00:02:27,970
And if they were tied, the model would not

50
00:02:27,970 --> 00:02:30,490
know which one to select.

51
00:02:30,490 --> 00:02:32,860
So to compute this smart baseline,

52
00:02:32,860 --> 00:02:35,260
we're going to use a new function called the sign

53
00:02:35,260 --> 00:02:36,500
function.

54
00:02:36,500 --> 00:02:38,650
And what this function does is, if it's

55
00:02:38,650 --> 00:02:41,650
passed a positive number, it returns the value 1.

56
00:02:41,650 --> 00:02:45,270
If it's passed a negative number, it returns negative 1.

57
00:02:45,270 --> 00:02:48,080
And if it's passed 0, it returns 0.

58
00:02:48,080 --> 00:02:52,810
So if we passed the Rasmussen variable into sign,

59
00:02:52,810 --> 00:02:55,600
whenever the Republican was winning the state, meaning

60
00:02:55,600 --> 00:02:58,840
Rasmussen is positive, it's going to return a 1.

61
00:02:58,840 --> 00:03:01,380
So for instance, if the value 20 is

62
00:03:01,380 --> 00:03:04,440
passed, meaning the Republican is polling 20 ahead,

63
00:03:04,440 --> 00:03:05,470
it returns 1.

64
00:03:05,470 --> 00:03:09,510
So 1 signifies that the Republican is predicted to win.

65
00:03:09,510 --> 00:03:11,950
If the Democrat is leading in the Rasmussen poll,

66
00:03:11,950 --> 00:03:14,170
it'll take on a negative value.

67
00:03:14,170 --> 00:03:18,150
So if we took for instance the sign of -10, we get -1.

68
00:03:18,150 --> 00:03:21,260
So -1 means this smart baseline is

69
00:03:21,260 --> 00:03:24,220
predicting that the Democrat won the state.

70
00:03:24,220 --> 00:03:26,490
And finally, if we took the sign of 0,

71
00:03:26,490 --> 00:03:29,270
meaning that the Rasmussen poll had a tie,

72
00:03:29,270 --> 00:03:31,320
it returns 0, saying that the model is

73
00:03:31,320 --> 00:03:35,140
inconclusive about who's going to win the state.

74
00:03:35,140 --> 00:03:37,930
So now, we're ready to actually compute

75
00:03:37,930 --> 00:03:41,520
this prediction for all of our training set.

76
00:03:41,520 --> 00:03:43,280
And we can take a look at the breakdown

77
00:03:43,280 --> 00:03:46,190
of that using the table function applied

78
00:03:46,190 --> 00:03:52,830
to the sign of the training set's Rasmussen variable.

79
00:03:52,830 --> 00:03:56,340
And what we can see is that in 56 of the 100 training set

80
00:03:56,340 --> 00:03:59,500
observations, the smart baseline predicted

81
00:03:59,500 --> 00:04:01,740
that the Republican was going to win.

82
00:04:01,740 --> 00:04:04,750
In 42 instances, it predicted the Democrat.

83
00:04:04,750 --> 00:04:07,640
And in two instances, it was inconclusive.

84
00:04:07,640 --> 00:04:11,100
So what we really want to do is to see the breakdown of how

85
00:04:11,100 --> 00:04:15,290
the smart baseline model does, compared to the actual result

86
00:04:15,290 --> 00:04:17,399
-- who actually won the state.

87
00:04:17,399 --> 00:04:19,760
So we want to again use the table function,

88
00:04:19,760 --> 00:04:23,240
but this time, we want to compare the training set's

89
00:04:23,240 --> 00:04:28,650
outcome against the sign of the polling data.

90
00:04:28,650 --> 00:04:32,180


91
00:04:32,180 --> 00:04:35,590
So in this table, the rows are the true outcome --

92
00:04:35,590 --> 00:04:38,320
1 is for Republican, 0 is for Democrat --

93
00:04:38,320 --> 00:04:42,195
and the columns are the smart baseline predictions, -1, 0,

94
00:04:42,195 --> 00:04:43,280
or 1.

95
00:04:43,280 --> 00:04:47,130
What we can see is in the top left corner over here,

96
00:04:47,130 --> 00:04:51,990
we have 42 observations where the Rasmussen smart baseline

97
00:04:51,990 --> 00:04:53,580
predicted the Democrat would win,

98
00:04:53,580 --> 00:04:55,840
and the Democrat actually did win.

99
00:04:55,840 --> 00:04:59,385
There were 52 observations where the smart baseline predicted

100
00:04:59,385 --> 00:05:01,940
the Republican would win, and the Republican actually

101
00:05:01,940 --> 00:05:03,070
did win.

102
00:05:03,070 --> 00:05:06,460
Again, there were those two inconclusive observations.

103
00:05:06,460 --> 00:05:08,200
And finally, there were four mistakes.

104
00:05:08,200 --> 00:05:11,740
There were four times where the smart baseline model predicted

105
00:05:11,740 --> 00:05:14,480
that the Republican would win, but actually the Democrat

106
00:05:14,480 --> 00:05:15,760
won the state.

107
00:05:15,760 --> 00:05:17,775
So as we can see, this model, with four mistakes

108
00:05:17,775 --> 00:05:21,000
and two inconclusive results out of the 100 training

109
00:05:21,000 --> 00:05:25,060
set observations is doing much, much better than the naive

110
00:05:25,060 --> 00:05:27,560
baseline, which simply was always predicting

111
00:05:27,560 --> 00:05:29,040
the Republican would win and made

112
00:05:29,040 --> 00:05:31,780
47 mistakes on the same data.

113
00:05:31,780 --> 00:05:35,300
So we see that this is a much more reasonable baseline model

114
00:05:35,300 --> 00:05:38,320
to carry forward, against which we can compare

115
00:05:38,320 --> 00:05:41,157
our logistic regression-based approach.

116
00:05:41,157 --> 00:05:41,657


