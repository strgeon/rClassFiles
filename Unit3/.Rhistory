data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
str(statedata)
plot(x,y)
plot(statedata$x,statedata$y)
tapply(statedata$HS.Grad,statedata$state.region, mean)
boxplot(statedata$Murder ~ statedata$region)
summary(statedata)
?boxplot
boxplot(statedata$Murder ~ statedata$state.region)
subset(statedata$Murder > 10,statedata$region=="Northeast")
subset(statedata$Murder,statedata$region=="Northeast")
subset(statedata$Murder,statedata$state.region=="Northeast")
subset(statedata$state.name,statedata$Murder,statedata$state.region=="Northeast")
ne=subset(statedata$Murder,statedata$state.region=="Northeast")
ne
subset(statedata$state.name,statedata$state.region=="Northeast")
ne=subset(statedata,statedata$state.region=="Northeast")
ne$Murder
ne$Murder, ne$state.abb
c(ne$Murder, ne$state.abb)
table(ne$Murder, ne$state.abb)
ne
ne[c("Murder", "State")]
ne[c("Murder", "state.name")]
ne[c("Murder")]
ne
ne[c("Population")]
tapply(statedata$HS.Grad, statedata$state.region, mean)
str(statedata)
lilifeEx=lm(Life.Exp ~ Population + Income + Illiteracy + feEx=lm(Life.Exp ~ Population + Income, Illiteracy, Murder, HS.Grad, Frost, and Area
Murder + HS.Grad + Frost,data=statedata) 
lifeEx=lm(Life.Exp ~ Population + Income + Illiteracy + 
Murder + HS.Grad + Frost,data=statedata) 
summary(lifeEx)
lifeEx=lm(Life.Exp ~ Population + Income + Illiteracy + 
Murder + HS.Grad + Frost + Area,data=statedata)
summary(lifeEx)
plot(statedata$Income, statedata$Life.Exp)
cor(statedata$Income, statedata$HS.Grad)
cor(statedata$Income, statedata$Illiteracy)
cor(lifeEx)
cor(statedata)
plot(statedata$Income, statedata$Life.Exp
)
cor(statedata$Income, statedata$Murder)
cor(statedata$Income, statedata$Area)
lifeEx=lm(Life.Exp ~ Population + Income + Illiteracy + 
Murder + HS.Grad + Frost,data=statedata)
summary(lifeEx)
lifeEx=lm(Life.Exp ~ Population + Income + Murder + HS.Grad + Frost,data=statedata)
summary(lifeEx)
lifeEx=lm(Life.Exp ~ Population + Murder + HS.Grad + Frost,data=statedata)
summary(lifeEx)
lifeEx=lm(Life.Exp ~ Murder + HS.Grad + Frost,data=statedata)
summary(lifeEx)
lifeEx=lm(Life.Exp ~ Population + Murder + HS.Grad + Frost,data=statedata)
predTest=predict(lifeEx,data=statedata)
predTest
sort(predTest)
min(statedata$Life.Exp)
statedata[1]
statedata$lifeExp[1]
min(statedata$Life.Exp)
statedata$Life.Exp[1]
str(statedata)
table(statedata$state.name,statedata$Life.Exp)
statedata[c("state.name","Life.Exp")]
sort(statedata[c("state.name","Life.Exp")])
min(statedata$Life.Exp)
statedata$Life.Exp[1]
statedata[c("Life.Exp")]
sort(statedata[c("Life.Exp")])
lifeEx2=statedata[c("Life.Exp")]
lifeEx2
sort(lifeEx2)
?sort
order(lifeEx2)
which.min(statedata$Life.Exp)
statedata$state.name[40]
sort(lifeEx2)
sort(predTest)
which.max(statedata$Life.Exp)
statedata$state.name[11]
lifeEx2
lifeEx$residuals
which.min(lifeEx$residuals^2)
which.max(lifeEx$residuals^2)
sort(abs(lifeEx$residuals))
sort(abs(statedata$Life.Exp - predict(lifeEx)))
elanTot=read.csv("elantra.csv")
elanTot=read.csv("elantra.csv")
elanTot=read.csv("elantra.csv")
getwd
getwd()
setwd("C:/Users/Scott/Documents/Skydrive/Courses/C:\Users\Scott\SkyDrive\Documents\Courses\AnalyticsEdge\Unit2")
setwd("C:/Users/Scott/SkyDrive/Documents/Courses/AnalyticsEdge/Unit2")
getwd()
elanTot=read.csv("elantra.csv")
str(elanTot)
elanTrain=subset(elanTot,Year<2013)
elanTest=subset(elanTot,Year>2012)
str(elanTrain)
elanSales=lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data=elanTrain)
elanSales=lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data=elanTrain)
summary(elanSales)
elanSales=lm(ElantraSales ~ Month + Unemployment + CPI_all + CPI_energy + Queries, data=elanTrain)
summary(elanSales)
subset(elanTrain,Month="January")
subset(elanTrain,Month=1)
subset(elanTrain,Month="1")
subset(elanTrain,Month==1)
subset(elanTrain,Month==3)
summary(elanTrain)
summary(elanSales)
elanTrain$MthFactor=as.factor(elanTrain$Month)
str(elanTrain)
elanSales=lm(ElantraSales ~ MthFactor + Unemployment + CPI_all + CPI_energy + Queries, data=elanTrain)
summary(elanSales)
elanTest$MthFactor=as.factor(elanTest$Month)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(elanTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
elanSales=lm(ElantraSales ~ MthFactor + Unemployment + CPI_all + CPI_energy, data=elanTrain)
summary(elanSales)
SSE=(sum(elanSales$residuals^2))
SSE
PredictTest = predict(elanSales,newdata=elanTest)
SSE = sum(PredictTest - elanTest$ElantraSales)^2
SSE
elanSales=lm(ElantraSales ~ MthFactor + Unemployment + CPI_all + CPI_energy + Queries, data=elanTrain)
elanSales=lm(ElantraSales ~ MthFactor + Unemployment + CPI_all + CPI_energy, data=elanTrain)
PredictTest = predict(elanSales,newdata=elanTest)
SSE = sum(PredictTest - elanTest$ElantraSales)^2
SSE
logit=-1.5 + 3 - 2.5
exp(logit)
1/1+(e^-logit)
1/1+(exp(-logit))
1/(1 + (exp(-logit)))
1/(1 + e^(1))
quality=read.csv("quality.csv")
getwd()
wd=getwd()
setwd("C:/Users/Scott/SkyDrive/Documents/Courses/AnalyticsEdge/Unit3")
getwd()
quality=read.csv("quality.csv")
str(quality)
table(quality$PoorCare)
install.packages("caTools")
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio=0.75)
split
qualityTrain=subset(quality,split==TRUE)
qualityTest=subset(quality,split==FALSE)
QualityLog=glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
PredictTrain=predict(QualityLog, type="response")
summary(PredictTrain)
tapply(PredictTrain, qualityTrain$PoorCare, mean)
QualityLog=glm(PoorCare ~ StartedOnCombination + ProviderCount, data=qualityTrain, family=binomial)
QualityLog=glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
QualityLog2=glm(PoorCare ~ StartedOnCombination + ProviderCount, data=qualityTrain, family=binomial)
summary(QualityLog2)
table(qualityTrain$PoorCare, predictTrain > 0.5)
table(qualityTrain$PoorCare, PredictTrain > 0.5)
abc=table(qualityTrain$PoorCare, PredictTrain > 0.5)
abc
str(abc)
abc[0][0]
x=abc[0][0]
x
abc[0]
abc(0)
10/14
70/74
10/25
20/25
10/25
15/25
save.image("C:\\Users\\Scott\\SkyDrive\\Documents\\Courses\\AnalyticsEdge\\Unit2\\.RData")
save.image("C:\\Users\\Scott\\SkyDrive\\Documents\\Courses\\AnalyticsEdge\\Unit2\\Unit2_workspace")
save.image("C:\\Users\\Scott\\SkyDrive\\Documents\\Courses\\AnalyticsEdge\\Unit3\\unit3workspace")
 install.packages("ROCR")
library(ROCR)
tpr
ROCRpredict=prediction(predROCRpred=prediction(PredictTrain, qualityTrain$PoorCare)
ROCRperf=performance(ROCRpred, "tpr","fpr")
plot(ROCRperf)
ROCRpred=prediction(PredictTrain, qualityTrain$PoorCare)
ROCRperf=performance(ROCRpred, "tpr","fpr")
plot(ROCRperf)
plot(ROCRperf,colorize=TRUE)
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.1),text.adj=c(-0.2,1.7))
table(qualityTrain$PoorCare, PredictTrain > 0.5)
install.packages("rj")
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-2.1")
q()
