0
00:00:00,000 --> 00:00:00,970


1
00:00:00,970 --> 00:00:03,850
In this video we will try to segment

2
00:00:03,850 --> 00:00:06,700
an MRI brain image of a healthy patient using

3
00:00:06,700 --> 00:00:08,860
hierarchical clustering.

4
00:00:08,860 --> 00:00:10,790
Make sure that you are in the directory where

5
00:00:10,790 --> 00:00:13,340
you saved the healthy.csv file.

6
00:00:13,340 --> 00:00:15,730
We will be following the exact same steps

7
00:00:15,730 --> 00:00:17,960
we did in the previous video.

8
00:00:17,960 --> 00:00:21,610
First, read in the data, and call the data frame healthy.

9
00:00:21,610 --> 00:00:25,800
Use the read.csv function to read in the healthy data set.

10
00:00:25,800 --> 00:00:27,800
And remember that this healthy data set consists

11
00:00:27,800 --> 00:00:32,220
of a matrix of intensity values, so let's set the header

12
00:00:32,220 --> 00:00:34,740
to false.

13
00:00:34,740 --> 00:00:37,610
And now let's create the healthy matrix using

14
00:00:37,610 --> 00:00:41,212
the as.matrix function, which takes as an input

15
00:00:41,212 --> 00:00:42,170
the healthy data frame.

16
00:00:42,170 --> 00:00:44,850


17
00:00:44,850 --> 00:00:46,570
And now let's output the structure

18
00:00:46,570 --> 00:00:49,030
of the healthy matrix.

19
00:00:49,030 --> 00:00:52,990
And then we realize that we have 566

20
00:00:52,990 --> 00:00:56,760
by 646 pixel resolution for our image.

21
00:00:56,760 --> 00:01:00,430
So this MRI image is considerably larger

22
00:01:00,430 --> 00:01:02,690
than the little flower image that we saw,

23
00:01:02,690 --> 00:01:06,170
and we worked with in the previous two videos.

24
00:01:06,170 --> 00:01:09,625
To see the MRI image, we can use the image function

25
00:01:09,625 --> 00:01:13,360
in R, which takes as an input the healthy matrix.

26
00:01:13,360 --> 00:01:16,560
And then let's turn our axes off.

27
00:01:16,560 --> 00:01:18,810
And then use the grey-scale color scheme.

28
00:01:18,810 --> 00:01:22,400
So the color is equal to grey, which shades a sequence

29
00:01:22,400 --> 00:01:27,970
of values going from zero to one, with the length of 256.

30
00:01:27,970 --> 00:01:30,450
And now going to our graphics window,

31
00:01:30,450 --> 00:01:33,680
we see that what we have is the T2-weighted MRI

32
00:01:33,680 --> 00:01:35,880
imaging of a top section of the brain.

33
00:01:35,880 --> 00:01:37,630
And it shows different substances,

34
00:01:37,630 --> 00:01:40,110
such as the gray matter, the white matter,

35
00:01:40,110 --> 00:01:43,040
and the cerebrospinal fluid.

36
00:01:43,040 --> 00:01:45,195
Now let us see if we can isolate these substances

37
00:01:45,195 --> 00:01:48,507
via hierarchical clustering.

38
00:01:48,507 --> 00:01:50,840
We first need to convert the healthy matrix to a vector,

39
00:01:50,840 --> 00:01:54,320
and let's call it healthyVector.

40
00:01:54,320 --> 00:01:58,800
And that is equal to as.vector of the healthy matrix.

41
00:01:58,800 --> 00:02:01,320


42
00:02:01,320 --> 00:02:03,230
And now the first step in performing

43
00:02:03,230 --> 00:02:06,670
hierarchical clustering is computing the distance matrix.

44
00:02:06,670 --> 00:02:13,060
So let's type distance equals dist of healthyVector.

45
00:02:13,060 --> 00:02:15,070
And let's specify the method to be euclidean.

46
00:02:15,070 --> 00:02:19,530


47
00:02:19,530 --> 00:02:23,140
Oh, R gives us an error that seems to tell us that

48
00:02:23,140 --> 00:02:27,110
our vector is huge, and R cannot allocate enough memory.

49
00:02:27,110 --> 00:02:29,740
Well let us see how big is our vector.

50
00:02:29,740 --> 00:02:32,930
So we're going to go and use the structure

51
00:02:32,930 --> 00:02:35,350
function over the healthy vector,

52
00:02:35,350 --> 00:02:39,170
and let's see what we obtain.

53
00:02:39,170 --> 00:02:39,690
Hm.

54
00:02:39,690 --> 00:02:45,070
The healthy vector has 365,636 elements.

55
00:02:45,070 --> 00:02:46,450
Let's call this number n.

56
00:02:46,450 --> 00:02:49,800
And remember, from our previous video,

57
00:02:49,800 --> 00:02:52,580
that for R to calculate the pairwise distances,

58
00:02:52,580 --> 00:02:59,820
it would actually need to calculate n*(n-1)/2 and then

59
00:02:59,820 --> 00:03:02,010
store them in the distance matrix.

60
00:03:02,010 --> 00:03:04,800
Let's see how big this number is.

61
00:03:04,800 --> 00:03:05,600
Wow.

62
00:03:05,600 --> 00:03:07,820
Of course R would complain.

63
00:03:07,820 --> 00:03:10,320
It's 67 billion values that we're

64
00:03:10,320 --> 00:03:13,433
asking R to store in a matrix.

65
00:03:13,433 --> 00:03:16,930
The bad news now is that we cannot use hierarchical

66
00:03:16,930 --> 00:03:18,440
clustering.

67
00:03:18,440 --> 00:03:20,610
Is there any other solution?

68
00:03:20,610 --> 00:03:22,750
Well, we have seen in lecture two

69
00:03:22,750 --> 00:03:26,300
that another clustering method is k-means.

70
00:03:26,300 --> 00:03:28,160
Let us review it first, and see if it

71
00:03:28,160 --> 00:03:31,620
could work on our high resolution image.

72
00:03:31,620 --> 00:03:33,800
The k-means clustering algorithm aims

73
00:03:33,800 --> 00:03:36,720
at partitioning the data into k clusters,

74
00:03:36,720 --> 00:03:38,830
in a way that each data point belongs

75
00:03:38,830 --> 00:03:42,210
to the cluster whose mean is the nearest to it.

76
00:03:42,210 --> 00:03:45,740
Let's go over the algorithm step-by-step.

77
00:03:45,740 --> 00:03:48,560
In this example we have five data points.

78
00:03:48,560 --> 00:03:51,610
The first step is to specify the number of clusters.

79
00:03:51,610 --> 00:03:56,410
And suppose we wish to find two clusters, so set k=2.

80
00:03:56,410 --> 00:03:58,990
Then we start by randomly grouping the data

81
00:03:58,990 --> 00:04:00,450
into two clusters.

82
00:04:00,450 --> 00:04:03,140
For instance, three points in the red cluster,

83
00:04:03,140 --> 00:04:06,570
and the remaining two points in the grey cluster.

84
00:04:06,570 --> 00:04:10,360
The next step is to compute the cluster means or centroids.

85
00:04:10,360 --> 00:04:13,310
Let's first compute the mean of the red cluster,

86
00:04:13,310 --> 00:04:17,120
and then the mean of the grey cluster is simply the midpoint.

87
00:04:17,120 --> 00:04:20,019
Now remember that the k-means clustering algorithm

88
00:04:20,019 --> 00:04:23,790
tries to cluster points according to the nearest mean.

89
00:04:23,790 --> 00:04:27,260
But this red point over here seems to be closer to the mean

90
00:04:27,260 --> 00:04:30,290
of the grey cluster, then to the mean of the red cluster

91
00:04:30,290 --> 00:04:33,530
to which it was assigned in the previous step.

92
00:04:33,530 --> 00:04:36,850
So intuitively, the next step in the k-means algorithm

93
00:04:36,850 --> 00:04:41,220
is to re-assign the data points to the closest cluster mean.

94
00:04:41,220 --> 00:04:45,920
As a result, now this red point should be in the grey cluster.

95
00:04:45,920 --> 00:04:48,710
Now that we moved one point from the red cluster over

96
00:04:48,710 --> 00:04:51,900
to the grey cluster, we need to update the means.

97
00:04:51,900 --> 00:04:55,140
This is exactly the next step in the k-means algorithm.

98
00:04:55,140 --> 00:04:59,340
So let's recompute the mean of the red cluster,

99
00:04:59,340 --> 00:05:02,970
and then re-compute the mean of the grey cluster.

100
00:05:02,970 --> 00:05:05,340
Now we go back to Step 4.

101
00:05:05,340 --> 00:05:07,060
Is there any point here that seems

102
00:05:07,060 --> 00:05:10,850
to be cluster to a cluster mean that it does not belong to?

103
00:05:10,850 --> 00:05:14,700
If so, we need to re-assign it to the other cluster.

104
00:05:14,700 --> 00:05:16,500
However, in this case, all points

105
00:05:16,500 --> 00:05:20,000
are closest to their cluster mean, so the algorithm is done,

106
00:05:20,000 --> 00:05:22,310
and we can stop.

107
00:05:22,310 --> 00:05:24,800
In the next video, we will implement the k-means algorithm

108
00:05:24,800 --> 00:05:28,470
in R to try to segment the MRI brain image.

109
00:05:28,470 --> 00:05:29,559


