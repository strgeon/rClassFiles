0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:03,540
In our previous video, we found the distance matrix,

2
00:00:03,540 --> 00:00:06,190
which computes the pairwise distances between all

3
00:00:06,190 --> 00:00:09,040
the intensity values in the flower vector.

4
00:00:09,040 --> 00:00:11,430
Now we can cluster the intensity values

5
00:00:11,430 --> 00:00:13,920
using hierarchical clustering.

6
00:00:13,920 --> 00:00:17,880
So we're going to type clusterIntensity.

7
00:00:17,880 --> 00:00:20,540
And then we're going to use the hclust function, which

8
00:00:20,540 --> 00:00:23,500
is the hierarchical clustering function in R, which

9
00:00:23,500 --> 00:00:26,080
takes as an input the distance matrix.

10
00:00:26,080 --> 00:00:28,810
And then we're going to specify the clustering method

11
00:00:28,810 --> 00:00:31,450
to be "ward”.

12
00:00:31,450 --> 00:00:33,640
As a reminder, the Ward’s method

13
00:00:33,640 --> 00:00:35,480
is a minimum variance method, which

14
00:00:35,480 --> 00:00:38,650
tries to find compact and spherical clusters.

15
00:00:38,650 --> 00:00:41,500
We can think about it as trying to minimize the variance

16
00:00:41,500 --> 00:00:45,250
within each cluster and the distance among clusters.

17
00:00:45,250 --> 00:00:47,009
Now we can plot the cluster dendrogram.

18
00:00:47,009 --> 00:00:48,175
So-- plot(clusterIntensity).

19
00:00:48,175 --> 00:00:54,060


20
00:00:54,060 --> 00:00:57,240
And now we obtain the cluster dendrogram.

21
00:00:57,240 --> 00:01:00,540
Let's have here a little aside or a quick reminder

22
00:01:00,540 --> 00:01:05,129
about how to read a dendrogram and make sense of it.

23
00:01:05,129 --> 00:01:08,620
Let us first consider this toy dendrogram example.

24
00:01:08,620 --> 00:01:10,390
The lowest row of nodes represent

25
00:01:10,390 --> 00:01:13,250
the data or the individual observations,

26
00:01:13,250 --> 00:01:16,170
and the remaining nodes represent the clusters.

27
00:01:16,170 --> 00:01:18,270
The vertical lines depict the distance

28
00:01:18,270 --> 00:01:20,720
between two nodes or clusters.

29
00:01:20,720 --> 00:01:24,120
The taller the line, the more dissimilar the clusters are.

30
00:01:24,120 --> 00:01:29,480
For instance, cluster D-E-F is closer to cluster B-C-D-E-F

31
00:01:29,480 --> 00:01:31,600
than cluster B-C is.

32
00:01:31,600 --> 00:01:34,720
And this is well depicted by the height of the lines connecting

33
00:01:34,720 --> 00:01:39,720
each of clusters B-C and D-E-F to their parent node.

34
00:01:39,720 --> 00:01:42,760
Now cutting the dendrogram at a given level

35
00:01:42,760 --> 00:01:45,160
yields a certain partitioning of the data.

36
00:01:45,160 --> 00:01:49,110
For instance, if we cut the tree between levels two and three,

37
00:01:49,110 --> 00:01:54,590
we obtain four clusters, A, B-C, D-E, and F.

38
00:01:54,590 --> 00:01:58,120
If we cut the dendrogram between levels three and four,

39
00:01:58,120 --> 00:02:03,690
then we obtain three clusters, A, B-C, and D-E-F.

40
00:02:03,690 --> 00:02:06,580
And if we were to cut the dendrogram between levels four

41
00:02:06,580 --> 00:02:12,800
and five, then we obtain two clusters, A and B-C-D-E-F.

42
00:02:12,800 --> 00:02:16,120
What to choose, two, three, or four clusters?

43
00:02:16,120 --> 00:02:19,670
Well, the smaller the number of clusters, the coarser

44
00:02:19,670 --> 00:02:21,235
the clustering is.

45
00:02:21,235 --> 00:02:23,850
But at the same time, having many clusters

46
00:02:23,850 --> 00:02:26,020
may be too much of a stretch.

47
00:02:26,020 --> 00:02:29,410
We should always have this trade-off in mind.

48
00:02:29,410 --> 00:02:31,750
Now the distance information between clusters

49
00:02:31,750 --> 00:02:34,970
can guide our choice of the number of clusters.

50
00:02:34,970 --> 00:02:38,300
A good partition belongs to a cut that has a good enough room

51
00:02:38,300 --> 00:02:39,890
to move up and down.

52
00:02:39,890 --> 00:02:43,230
For instance, the cut between levels two and three can go up

53
00:02:43,230 --> 00:02:47,280
until it reaches cluster D-E-F. The cut between levels three

54
00:02:47,280 --> 00:02:50,310
and four has more room to move until it reaches the cluster

55
00:02:50,310 --> 00:02:54,590
B-C-D-E-F. And the cut between levels four and five has

56
00:02:54,590 --> 00:02:56,080
the least room.

57
00:02:56,080 --> 00:02:58,720
So it seems like choosing three clusters

58
00:02:58,720 --> 00:03:02,040
is reasonable in this case.

59
00:03:02,040 --> 00:03:04,280
Going back to our dendrogram, it seems

60
00:03:04,280 --> 00:03:07,580
that having two clusters or three clusters

61
00:03:07,580 --> 00:03:09,390
is reasonable in our case.

62
00:03:09,390 --> 00:03:11,360
We can actually visualize the cuts

63
00:03:11,360 --> 00:03:14,770
by plotting rectangles around the clusters on this tree.

64
00:03:14,770 --> 00:03:19,560
To do so, we can use the rect.hclust function,

65
00:03:19,560 --> 00:03:22,190
which takes as an input clusterIntensity, which

66
00:03:22,190 --> 00:03:23,540
is our tree.

67
00:03:23,540 --> 00:03:26,140
And then we can specify the number of clusters

68
00:03:26,140 --> 00:03:26,760
that we want.

69
00:03:26,760 --> 00:03:29,260
So let's set k=3.

70
00:03:29,260 --> 00:03:31,660
And we can color the borders of the rectangles.

71
00:03:31,660 --> 00:03:35,425
And let's color them, for instance, in red.

72
00:03:35,425 --> 00:03:37,810
Now going back to our dendrogram,

73
00:03:37,810 --> 00:03:40,010
now we can see the three clusters

74
00:03:40,010 --> 00:03:42,870
in these red rectangles.

75
00:03:42,870 --> 00:03:46,400
Now let us split the data into these three clusters.

76
00:03:46,400 --> 00:03:47,940
We're going to call our clusters,

77
00:03:47,940 --> 00:03:51,650
for instance, flowerClusters.

78
00:03:51,650 --> 00:03:55,410
And then we're going to use the function cutree.

79
00:03:55,410 --> 00:03:58,870
And literally, this function cuts the dendrogram

80
00:03:58,870 --> 00:04:01,427
into however many clusters we want.

81
00:04:01,427 --> 00:04:02,926
The input would be clusterIntensity.

82
00:04:02,926 --> 00:04:05,500


83
00:04:05,500 --> 00:04:09,610
And then we have to specify k=3, because we would like to have

84
00:04:09,610 --> 00:04:12,670
three clusters.

85
00:04:12,670 --> 00:04:14,770
Now let us output the flowerClusters

86
00:04:14,770 --> 00:04:16,779
variable to see how it looks.

87
00:04:16,779 --> 00:04:19,769
So flowerClusters.

88
00:04:19,769 --> 00:04:22,860
And we see that flowerClusters is actually

89
00:04:22,860 --> 00:04:26,330
a vector that assigns each intensity value in the flower

90
00:04:26,330 --> 00:04:27,830
vector to a cluster.

91
00:04:27,830 --> 00:04:31,240
It actually has the same length, which is 2,500,

92
00:04:31,240 --> 00:04:34,820
and has values 1, 2, and 3, which

93
00:04:34,820 --> 00:04:37,030
correspond to each cluster.

94
00:04:37,030 --> 00:04:40,470
To find the mean intensity value of each of our clusters,

95
00:04:40,470 --> 00:04:44,380
we can use the tapply function and ask R to group

96
00:04:44,380 --> 00:04:48,630
the values in the flower vector according to the flower

97
00:04:48,630 --> 00:04:51,770
clusters, and then apply the mean statistic

98
00:04:51,770 --> 00:04:53,650
to each of the groups.

99
00:04:53,650 --> 00:04:56,540
What we obtain is that the first cluster has a mean intensity

100
00:04:56,540 --> 00:05:00,170
value of 0.08, which is closest to zero,

101
00:05:00,170 --> 00:05:01,620
and this means that it corresponds

102
00:05:01,620 --> 00:05:03,850
to the darkest shape in our image.

103
00:05:03,850 --> 00:05:07,210
And then the third cluster here, which is closest to 1,

104
00:05:07,210 --> 00:05:09,940
corresponds to the fairest shade.

105
00:05:09,940 --> 00:05:11,540
And now the fun part.

106
00:05:11,540 --> 00:05:14,020
Let us see how the image was segmented.

107
00:05:14,020 --> 00:05:16,810
To output an image, we can use the image function

108
00:05:16,810 --> 00:05:20,155
in R, which takes a matrix as an input.

109
00:05:20,155 --> 00:05:24,460
But the variable flowerClusters, as we just saw, is a vector.

110
00:05:24,460 --> 00:05:27,340
So we need to convert it into a matrix.

111
00:05:27,340 --> 00:05:29,900
We can do this by setting the dimension of this variable

112
00:05:29,900 --> 00:05:31,930
by using the dimension function.

113
00:05:31,930 --> 00:05:34,940
So, let's use the dimension function, or dim,

114
00:05:34,940 --> 00:05:38,510
which takes as input flowerClusters.

115
00:05:38,510 --> 00:05:40,690
And then we're going to use the combined function,

116
00:05:40,690 --> 00:05:42,050
or the c function.

117
00:05:42,050 --> 00:05:44,690
And its first argument will be the number of rows

118
00:05:44,690 --> 00:05:47,680
that we want for the matrix, and that would be 50.

119
00:05:47,680 --> 00:05:50,620
And the second argument would be the number of columns.

120
00:05:50,620 --> 00:05:52,330
Why did we use 50?

121
00:05:52,330 --> 00:05:57,310
Simply because we have a 50 by 50 resolution picture.

122
00:05:57,310 --> 00:05:59,660
Now pressing Enter, and flowerClusters

123
00:05:59,660 --> 00:06:01,960
looks like a matrix.

124
00:06:01,960 --> 00:06:04,040
Now we can use the function image,

125
00:06:04,040 --> 00:06:08,160
which takes as an input the flowerClusters matrix.

126
00:06:08,160 --> 00:06:12,650
And let's turn off the axes by writing axes=FALSE.

127
00:06:12,650 --> 00:06:16,180
And now, going back to our graphics window,

128
00:06:16,180 --> 00:06:18,830
we can see our segmented image here.

129
00:06:18,830 --> 00:06:21,280
The darkest shade corresponds to the background,

130
00:06:21,280 --> 00:06:25,350
and this is actually associated with the first cluster.

131
00:06:25,350 --> 00:06:27,650
The one in the middle is the core of the flower,

132
00:06:27,650 --> 00:06:29,290
and this is cluster 2.

133
00:06:29,290 --> 00:06:31,720
And then the petals correspond to cluster 3,

134
00:06:31,720 --> 00:06:35,520
which has the fairest shade in our image.

135
00:06:35,520 --> 00:06:38,680
Let us now check how the original image looked.

136
00:06:38,680 --> 00:06:42,430
Let's go back to the console and then maximize it here.

137
00:06:42,430 --> 00:06:44,470
So let's go back to our image function,

138
00:06:44,470 --> 00:06:49,980
but now this time the input is the flower matrix.

139
00:06:49,980 --> 00:06:52,190
And then let's keep the axis as false.

140
00:06:52,190 --> 00:06:55,950
But now, how about we add an additional argument regarding

141
00:06:55,950 --> 00:06:57,220
the color scheme?

142
00:06:57,220 --> 00:06:58,580
Let's make it grayscale.

143
00:06:58,580 --> 00:07:01,100
So we're going to take the color,

144
00:07:01,100 --> 00:07:03,920
and it's going to take the function gray.

145
00:07:03,920 --> 00:07:06,240
And the input to this function is a sequence

146
00:07:06,240 --> 00:07:09,470
of values that goes from 0 to 1, which

147
00:07:09,470 --> 00:07:11,770
actually is from black to white.

148
00:07:11,770 --> 00:07:13,865
And then we have to also specify its length,

149
00:07:13,865 --> 00:07:18,250
and that's specified as 256, because this corresponds

150
00:07:18,250 --> 00:07:20,950
to the convention for grayscale.

151
00:07:20,950 --> 00:07:22,980
And now, going back to our image,

152
00:07:22,980 --> 00:07:26,780
now we can see our original grayscale image here.

153
00:07:26,780 --> 00:07:30,200
You can see that it has a very, very low resolution.

154
00:07:30,200 --> 00:07:32,860
But in our next video, we will try to segment

155
00:07:32,860 --> 00:07:35,760
an MRI image of the brain that has

156
00:07:35,760 --> 00:07:38,350
a much, much higher resolution.

