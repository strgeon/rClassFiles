0
00:00:00,000 --> 00:00:00,499


1
00:00:00,499 --> 00:00:03,860
In this video we'll use hierarchical clustering

2
00:00:03,860 --> 00:00:08,160
to cluster the movies in the Movie Lens data set by genre.

3
00:00:08,160 --> 00:00:10,150
After we make our clusters, we'll

4
00:00:10,150 --> 00:00:13,960
see how they can be used to make recommendations.

5
00:00:13,960 --> 00:00:17,220
There are two steps to hierarchical clustering.

6
00:00:17,220 --> 00:00:20,390
First we have to compute the distances between all data

7
00:00:20,390 --> 00:00:21,450
points,

8
00:00:21,450 --> 00:00:24,400
and then we need to cluster the points.

9
00:00:24,400 --> 00:00:28,350
To compute the distances we can use the dist function.

10
00:00:28,350 --> 00:00:32,320
We only want to cluster our movies on the genre variable,

11
00:00:32,320 --> 00:00:36,400
not on the title variable, so we'll cluster on columns two

12
00:00:36,400 --> 00:00:38,000
through 20.

13
00:00:38,000 --> 00:00:41,220
So let's call the output distances,

14
00:00:41,220 --> 00:00:44,710
and we'll use the dist function, where the first argument is

15
00:00:44,710 --> 00:00:50,460
movies[2:20], this is what we want to cluster on,

16
00:00:50,460 --> 00:00:55,520
and the second argument is method="euclidean",

17
00:00:55,520 --> 00:01:00,060
meaning that we want to use euclidean distance.

18
00:01:00,060 --> 00:01:03,660
Now let's cluster our movies using the hclust function

19
00:01:03,660 --> 00:01:05,960
for hierarchical clustering.

20
00:01:05,960 --> 00:01:09,210
We'll call the output clusterMovies,

21
00:01:09,210 --> 00:01:14,170
and use hclust where the first argument is distances,

22
00:01:14,170 --> 00:01:16,502
the output of the dist function.

23
00:01:16,502 --> 00:01:18,210
And the second argument is method="ward".

24
00:01:18,210 --> 00:01:21,210


25
00:01:21,210 --> 00:01:26,160
The ward method cares about the distance between clusters using

26
00:01:26,160 --> 00:01:29,120
centroid distance, and also the variance in each

27
00:01:29,120 --> 00:01:31,440
of the clusters.

28
00:01:31,440 --> 00:01:35,110
Now let's plot the dendrogram of our clustering algorithm

29
00:01:35,110 --> 00:01:38,710
by typing plot, and then in parentheses clusterMovies.

30
00:01:38,710 --> 00:01:42,560


31
00:01:42,560 --> 00:01:44,940
This dendrogram might look a little strange.

32
00:01:44,940 --> 00:01:48,180
We have all this black along the bottom.

33
00:01:48,180 --> 00:01:50,150
Remember that the dendrogram lists

34
00:01:50,150 --> 00:01:52,900
all of the data points along the bottom.

35
00:01:52,900 --> 00:01:55,420
But when there are over 1,000 data points

36
00:01:55,420 --> 00:01:57,420
it's impossible to read.

37
00:01:57,420 --> 00:02:00,900
We'll see later how to assign our clusters to groups so

38
00:02:00,900 --> 00:02:05,420
that we can analyze which data points are in which cluster.

39
00:02:05,420 --> 00:02:08,470
So looking at this dendrogram, how many clusters

40
00:02:08,470 --> 00:02:09,800
would you pick?

41
00:02:09,800 --> 00:02:13,120
It looks like maybe three or four clusters

42
00:02:13,120 --> 00:02:16,120
would be a good choice according to the dendrogram,

43
00:02:16,120 --> 00:02:19,090
but let's keep our application in mind, too.

44
00:02:19,090 --> 00:02:23,050
We probably want more than two, three, or even four clusters

45
00:02:23,050 --> 00:02:27,260
of movies to make recommendations to users.

46
00:02:27,260 --> 00:02:28,830
It looks like there's a nice spot

47
00:02:28,830 --> 00:02:32,610
down here where there's 10 clusters.

48
00:02:32,610 --> 00:02:35,870
This is probably better for our application.

49
00:02:35,870 --> 00:02:38,400
We could select even more clusters

50
00:02:38,400 --> 00:02:42,030
if we want to have very specific genre groups.

51
00:02:42,030 --> 00:02:43,900
If you want a lot of clusters it's

52
00:02:43,900 --> 00:02:46,750
hard to pick the right number from the dendrogram.

53
00:02:46,750 --> 00:02:49,610
You need to use your understanding of the problem

54
00:02:49,610 --> 00:02:52,020
to pick the number of clusters.

55
00:02:52,020 --> 00:02:54,400
Let's stick with 10 clusters for now,

56
00:02:54,400 --> 00:02:57,030
combining what we learned from the dendrogram

57
00:02:57,030 --> 00:03:00,590
with our understanding of the problem.

58
00:03:00,590 --> 00:03:06,010
Now back in our R console we can label each of the data points

59
00:03:06,010 --> 00:03:07,910
according to what cluster it belongs

60
00:03:07,910 --> 00:03:10,949
to using the cutree function.

61
00:03:10,949 --> 00:03:28,250
So let's type clusterGroups = cutree(clusterMovies,k=10)

62
00:03:28,250 --> 00:03:28,350


63
00:03:28,350 --> 00:03:28,450


64
00:03:28,450 --> 00:03:31,362
Now let's figure out what the clusters are like.

65
00:03:31,362 --> 00:03:33,990
We'll use the tapply function to compute

66
00:03:33,990 --> 00:03:38,250
the percentage of movies in each genre and cluster.

67
00:03:38,250 --> 00:03:42,880
So let's type tapply, and then give as the first argument,

68
00:03:42,880 --> 00:03:47,970
movies$Action-- we'll start with the action genre--

69
00:03:47,970 --> 00:03:54,790
and then clusterGroups, and then mean.

70
00:03:54,790 --> 00:03:56,370
So what does this do?

71
00:03:56,370 --> 00:04:00,050
It divides our data points into the 10 clusters

72
00:04:00,050 --> 00:04:02,290
and then computes the average value

73
00:04:02,290 --> 00:04:05,710
of the action variable for each cluster.

74
00:04:05,710 --> 00:04:07,550
Remember that the action variable

75
00:04:07,550 --> 00:04:11,320
is a binary variable with value 0 or 1.

76
00:04:11,320 --> 00:04:14,370
So by computing the average of this variable

77
00:04:14,370 --> 00:04:16,529
we're computing the percentage of movies

78
00:04:16,529 --> 00:04:20,399
in that cluster that belong in that genre.

79
00:04:20,399 --> 00:04:24,990
So we can see here that in cluster 2, about 78%

80
00:04:24,990 --> 00:04:28,360
of the movies have the action genre

81
00:04:28,360 --> 00:04:32,390
label, whereas in cluster 4 none of the movies

82
00:04:32,390 --> 00:04:34,940
are labeled as action movies.

83
00:04:34,940 --> 00:04:37,630
Let's try this again, but this time

84
00:04:37,630 --> 00:04:39,270
let's look at the romance genre.

85
00:04:39,270 --> 00:04:43,050


86
00:04:43,050 --> 00:04:46,850
Here we can see that all of the movies in clusters six

87
00:04:46,850 --> 00:04:52,300
and seven are labeled as romance movies, whereas only 4%

88
00:04:52,300 --> 00:04:56,420
of the movies in cluster two are labeled as romance movies.

89
00:04:56,420 --> 00:04:59,580
We can repeat this for each genre.

90
00:04:59,580 --> 00:05:02,050
If you do you can create a large table

91
00:05:02,050 --> 00:05:06,250
to better analyze the clusters, which I saved to a spreadsheet.

92
00:05:06,250 --> 00:05:07,110
Lets take a look.

93
00:05:07,110 --> 00:05:09,730


94
00:05:09,730 --> 00:05:12,810
Here we have in each column the cluster,

95
00:05:12,810 --> 00:05:15,740
and in each row the genre.

96
00:05:15,740 --> 00:05:17,950
I highlighted the cells that have

97
00:05:17,950 --> 00:05:20,420
a higher than average value.

98
00:05:20,420 --> 00:05:24,390
So we can see here in cluster 2, as we saw before,

99
00:05:24,390 --> 00:05:28,780
that cluster 2 has a high number of action movies.

100
00:05:28,780 --> 00:05:32,710
Cluster 1 has a little bit of everything, some animation,

101
00:05:32,710 --> 00:05:37,390
children's, fantasy, musicals, war and westerns.

102
00:05:37,390 --> 00:05:40,690
So I'm calling this the miscellaneous cluster.

103
00:05:40,690 --> 00:05:43,770
Cluster 2 has a lot of the action, adventure,

104
00:05:43,770 --> 00:05:46,210
and sci-fi movies.

105
00:05:46,210 --> 00:05:51,520
Cluster 3 has the crime, mystery, thriller movies.

106
00:05:51,520 --> 00:05:56,350
Cluster 4 exclusively has drama movies.

107
00:05:56,350 --> 00:06:01,040
Cluster 5, exclusively has comedies.

108
00:06:01,040 --> 00:06:05,880
Cluster 6 has a lot of the romance movies.

109
00:06:05,880 --> 00:06:10,440
Cluster 7 has movies that are comedies and romance movies,

110
00:06:10,440 --> 00:06:13,920
so I'm calling these the romantic comedies.

111
00:06:13,920 --> 00:06:17,520
Cluster 8 has the documentaries.

112
00:06:17,520 --> 00:06:21,360
Cluster 9 has the movies that are comedies and dramas,

113
00:06:21,360 --> 00:06:23,750
so the dramatic comedies.

114
00:06:23,750 --> 00:06:27,410
And cluster 10 has the horror flicks.

115
00:06:27,410 --> 00:06:30,030
Knowing common movie genres, these clusters

116
00:06:30,030 --> 00:06:32,610
seem to make a lot of sense.

117
00:06:32,610 --> 00:06:35,380
So now, back in our R console, let's see

118
00:06:35,380 --> 00:06:38,670
how these clusters could be used in a recommendation system.

119
00:06:38,670 --> 00:06:41,220


120
00:06:41,220 --> 00:06:44,650
Remember that Amy liked the movie Men in Black.

121
00:06:44,650 --> 00:06:47,810
Let's figure out what cluster Men in Black is in.

122
00:06:47,810 --> 00:06:52,821
We'll use the subset function to take a subset of movies

123
00:06:52,821 --> 00:06:55,196
and only look at the movies where the Title="Men in Black

124
00:06:55,196 --> 00:07:04,000
(1997)".

125
00:07:04,000 --> 00:07:06,450
Close the quotes in the parentheses.

126
00:07:06,450 --> 00:07:08,590
I knew that this is the title of Men in Black

127
00:07:08,590 --> 00:07:12,430
because I looked it up in our data set.

128
00:07:12,430 --> 00:07:17,660
So it looks like Men in Black is the 257th row in our data.

129
00:07:17,660 --> 00:07:21,782
So which cluster did the 257th movie go into?

130
00:07:21,782 --> 00:07:24,490
We can figure this out by typing clusterGroups[257].

131
00:07:24,490 --> 00:07:30,110


132
00:07:30,110 --> 00:07:33,400
It looks like Men in Black went into cluster 2.

133
00:07:33,400 --> 00:07:35,070
That make sense since we just saw

134
00:07:35,070 --> 00:07:39,680
that cluster 2 is the action, adventure, sci-fi cluster.

135
00:07:39,680 --> 00:07:41,890
So let's create a new data set with just

136
00:07:41,890 --> 00:07:43,810
the movies from cluster two.

137
00:07:43,810 --> 00:07:48,130
We'll call it cluster2, and use the subset function

138
00:07:48,130 --> 00:07:50,890
to take a subset of movies only taking

139
00:07:50,890 --> 00:07:54,730
the observations for which clusterGroups is equal to 2.

140
00:07:54,730 --> 00:07:57,250


141
00:07:57,250 --> 00:07:59,740
Let's look at the first 10 titles in this cluster.

142
00:07:59,740 --> 00:08:02,240
We can do this by typing cluster2$Title[1:10].

143
00:08:02,240 --> 00:08:08,920


144
00:08:08,920 --> 00:08:12,150
So it looks like good movies to recommend to Amy,

145
00:08:12,150 --> 00:08:14,440
according to our clustering algorithm,

146
00:08:14,440 --> 00:08:19,900
would be movies like Apollo 13 and Jurassic Park.

147
00:08:19,900 --> 00:08:22,310
In this video we saw how clustering

148
00:08:22,310 --> 00:08:25,940
can be applied to create a movie recommendation system.

149
00:08:25,940 --> 00:08:28,350
In the next video, we'll conclude

150
00:08:28,350 --> 00:08:31,850
by learning who ended up winning the million dollar Netflix

151
00:08:31,850 --> 00:08:33,400
prize.

