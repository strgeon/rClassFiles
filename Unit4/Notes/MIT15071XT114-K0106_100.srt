0
00:00:00,000 --> 00:00:00,499


1
00:00:00,499 --> 00:00:06,220
The cp parameter-- cp stands for complexity parameter.

2
00:00:06,220 --> 00:00:08,189
Recall that the first tree we made

3
00:00:08,189 --> 00:00:11,630
using latitude and longitude only had many splits,

4
00:00:11,630 --> 00:00:15,370
but we were able to trim it without losing much accuracy.

5
00:00:15,370 --> 00:00:18,010
The intuition we gain is, having too many splits

6
00:00:18,010 --> 00:00:21,680
is bad for generalization-- that is, performance on the test

7
00:00:21,680 --> 00:00:23,930
set-- so we should penalize the complexity.

8
00:00:23,930 --> 00:00:26,710


9
00:00:26,710 --> 00:00:31,800
Let us define RSS to be the residual sum of squares, also

10
00:00:31,800 --> 00:00:35,930
known as the sum of square differences.

11
00:00:35,930 --> 00:00:37,740
Our goal when building the tree is

12
00:00:37,740 --> 00:00:40,635
to minimize the RSS by making splits,

13
00:00:40,635 --> 00:00:44,780
but we want to penalize having too many splits now.

14
00:00:44,780 --> 00:00:47,210
Define S to be the number of splits,

15
00:00:47,210 --> 00:00:49,900
and lambda to be our penalty.

16
00:00:49,900 --> 00:00:52,050
Our new goal is to find a tree that

17
00:00:52,050 --> 00:00:56,080
minimizes the sum of the RSS at each leaf,

18
00:00:56,080 --> 00:01:00,730
plus lambda, times S, for the number of splits.

19
00:01:00,730 --> 00:01:04,290
Let us consider the following example.

20
00:01:04,290 --> 00:01:08,280
Here we have set lambda to be equal to 0.5.

21
00:01:08,280 --> 00:01:10,840
Initially, we have a tree with no splits.

22
00:01:10,840 --> 00:01:13,360
We simply take the average of the data.

23
00:01:13,360 --> 00:01:19,190
The RSS in this case is 5, thus our total penalty is also 5.

24
00:01:19,190 --> 00:01:23,150
If we make one split, we now have two leaves.

25
00:01:23,150 --> 00:01:28,600
At each of these leaves, say, we have an error, or RSS of 2.

26
00:01:28,600 --> 00:01:33,040
The total RSS error is then 2+2=4.

27
00:01:33,040 --> 00:01:39,370
And the total penalty is 4+0.5*1, the number of splits.

28
00:01:39,370 --> 00:01:43,410
Our total penalty in this case is 4.5.

29
00:01:43,410 --> 00:01:46,190
If we split again on one of our leaves,

30
00:01:46,190 --> 00:01:50,100
we now have a total of three leaves for two splits.

31
00:01:50,100 --> 00:01:52,940
The error at our left-most leaf is 1.

32
00:01:52,940 --> 00:01:55,600
The next leaf has an error of 0.8.

33
00:01:55,600 --> 00:02:00,340
And the next leaf has an error of 2, for a total error of 3.8.

34
00:02:00,340 --> 00:02:05,630
The total penalty is thus 3.8+0.5*2,

35
00:02:05,630 --> 00:02:10,229
for a total penalty of 4.8.

36
00:02:10,229 --> 00:02:12,950
Notice that if we pick a large value of lambda,

37
00:02:12,950 --> 00:02:14,970
we won't make many splits, because you

38
00:02:14,970 --> 00:02:17,380
pay a big price for every additional split that

39
00:02:17,380 --> 00:02:20,470
will outweigh the decrease in error.

40
00:02:20,470 --> 00:02:23,045
If we pick a small, or 0 value of lambda,

41
00:02:23,045 --> 00:02:25,960
it will make splits until it no longer decreases the error.

42
00:02:25,960 --> 00:02:28,650


43
00:02:28,650 --> 00:02:31,690
You may be wondering at this point, the definition of cp

44
00:02:31,690 --> 00:02:33,750
is what, exactly?

45
00:02:33,750 --> 00:02:37,200
Well, it's very closely related to lambda.

46
00:02:37,200 --> 00:02:40,020
Considering a tree with no splits,

47
00:02:40,020 --> 00:02:42,740
we simply take the average of the data,

48
00:02:42,740 --> 00:02:44,890
calculate RSS for that so-called tree,

49
00:02:44,890 --> 00:02:48,542
and let us call that RSS for no splits.

50
00:02:48,542 --> 00:02:50,375
Then we can define cp=lambda/RSS(no splits).

51
00:02:50,375 --> 00:02:54,950


52
00:02:54,950 --> 00:02:57,880
When you're actually using cp in your R code,

53
00:02:57,880 --> 00:03:01,000
you don't need to think exactly what it means-- just

54
00:03:01,000 --> 00:03:04,420
that small numbers of cp encourage large trees,

55
00:03:04,420 --> 00:03:08,400
and large values of cp encourage small trees.

56
00:03:08,400 --> 00:03:11,450
Let's go back to R now, and apply cross-validation

57
00:03:11,450 --> 00:03:13,720
to our training data.

