0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:02,440
Now let's look at the ROC curve so we

2
00:00:02,440 --> 00:00:04,670
can understand the performance of our model

3
00:00:04,670 --> 00:00:06,360
at different cutoffs.

4
00:00:06,360 --> 00:00:08,996
We'll first need to load the ROCR package

5
00:00:08,996 --> 00:00:09,870
with a library(ROCR).

6
00:00:09,870 --> 00:00:15,117


7
00:00:15,117 --> 00:00:18,276
Next, we'll build our ROCR prediction object.

8
00:00:18,276 --> 00:00:19,776
So we'll call this object predROCR =

9
00:00:19,776 --> 00:00:21,401
prediction(pred.prob, test$responsive).

10
00:00:21,401 --> 00:00:43,910


11
00:00:43,910 --> 00:00:44,410
All right.

12
00:00:44,410 --> 00:00:47,420
So now we want to plot the ROC curve

13
00:00:47,420 --> 00:00:50,830
so we'll use the performance function to extract

14
00:00:50,830 --> 00:00:54,260
the true positive rate and false positive rate.

15
00:00:54,260 --> 00:00:56,110
So create something called perfROCR =

16
00:00:56,110 --> 00:00:57,610
performance(predROCR, "tpr", "fpr").

17
00:00:57,610 --> 00:01:07,170


18
00:01:07,170 --> 00:01:15,690
And then we'll plot(perfROCR, colorize=TRUE),

19
00:01:15,690 --> 00:01:18,560
so that we can see the colors for the different cutoff

20
00:01:18,560 --> 00:01:21,178
thresholds.

21
00:01:21,178 --> 00:01:22,170
All right.

22
00:01:22,170 --> 00:01:24,545
Now, of course, the best cutoff to select

23
00:01:24,545 --> 00:01:28,220
is entirely dependent on the costs assigned by the decision

24
00:01:28,220 --> 00:01:31,480
maker to false positives and true positives.

25
00:01:31,480 --> 00:01:35,160
However, again, we do favor cutoffs

26
00:01:35,160 --> 00:01:37,780
that give us a high sensitivity.

27
00:01:37,780 --> 00:01:40,970
We want to identify a large number of the responsive

28
00:01:40,970 --> 00:01:42,180
documents.

29
00:01:42,180 --> 00:01:44,070
So something that might look promising

30
00:01:44,070 --> 00:01:46,210
might be a point right around here,

31
00:01:46,210 --> 00:01:48,810
in this part of the curve, where we

32
00:01:48,810 --> 00:01:51,990
have a true positive rate of around 70%,

33
00:01:51,990 --> 00:01:54,350
meaning that we're getting about 70%

34
00:01:54,350 --> 00:01:57,630
of all the responsive documents, and a false positive rate

35
00:01:57,630 --> 00:02:01,220
of about 20%, meaning that we're making mistakes

36
00:02:01,220 --> 00:02:05,200
and accidentally identifying as responsive 20%

37
00:02:05,200 --> 00:02:07,540
of the non-responsive documents.

38
00:02:07,540 --> 00:02:10,190
Now, since, typically, the vast majority of documents

39
00:02:10,190 --> 00:02:14,210
are non-responsive, operating at this cutoff

40
00:02:14,210 --> 00:02:16,115
would result, perhaps, in a large decrease

41
00:02:16,115 --> 00:02:18,240
in the amount of manual effort needed

42
00:02:18,240 --> 00:02:20,490
in the eDiscovery process.

43
00:02:20,490 --> 00:02:22,790
And we can see from the blue color

44
00:02:22,790 --> 00:02:25,340
of the plot at this particular location

45
00:02:25,340 --> 00:02:29,610
that we're looking at a threshold around maybe 0.15

46
00:02:29,610 --> 00:02:33,790
or so, significantly lower than 50%, which is definitely

47
00:02:33,790 --> 00:02:36,270
what we would expect since we favor

48
00:02:36,270 --> 00:02:40,570
false positives to false negatives.

49
00:02:40,570 --> 00:02:43,710
So lastly, we can use the ROCR package

50
00:02:43,710 --> 00:02:46,690
to compute our AUC value.

51
00:02:46,690 --> 00:02:49,910
So, again, call the performance function

52
00:02:49,910 --> 00:02:55,610
with our prediction object, this time extracting the AUC value

53
00:02:55,610 --> 00:03:00,000
and just grabbing the y value slot of it.

54
00:03:00,000 --> 00:03:05,780
We can see that we have an AUC in the test set of 79.4%, which

55
00:03:05,780 --> 00:03:07,710
means that our model can differentiate

56
00:03:07,710 --> 00:03:11,220
between a randomly selected responsive and non-responsive

57
00:03:11,220 --> 00:03:15,174
document about 80% of the time.

58
00:03:15,174 --> 00:03:15,673


